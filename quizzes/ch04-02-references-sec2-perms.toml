[[questions]]
id = "2e273ac2-6f06-4c19-a831-1d44eed89323"
type = "MultipleChoice"
prompt.prompt = """
Consider the permissions in the following program:

```aquascope,permissions,stepper
#fn main() {
let mut s = String::from("Hello");
let t = &mut s;
/* here */
t.push_str(" world");
println!("{}", s);
#}
```

At the point marked `/* here */`, what are the permissions on the path `s`? Select each permission below, or select "no permissions" 
if the path has no permissions.
"""
answer.answer = ["No permissions"]
prompt.distractors = ["R", "W", "O"]
prompt.answerIndex = 3
context = """
The mutable borrow `t = &mut s` removes all permissions on `s` while `t` is live.
"""

[[questions]]
id = "b431f43e-9a6f-4715-ae88-8896fca6ff3b"
type = "MultipleChoice"
prompt.prompt = """
Consider the permissions in the following program:

```aquascope,permissions,stepper,boundaries
fn get_first(v: &Vec<String>) -> &String {
    &v[0]
}

fn main() {
    let mut strs = vec![
        String::from("A"), String::from("B")
    ];
    let first = get_first(&strs);
    if first.len() > 0 {
        strs.push(String::from("C"));
    }
}
```

Which of the following best explains why `strs` loses and regains write permissions?
"""
answer.answer = "`get_first` returns an immutable reference to data within `strs`, so `strs` is not writable while `first` is live"
prompt.distractors = [
  "`strs` is not writable while the immutable reference `&strs` passed to `get_first` is live",
  "`strs` does not need write permissions until the `strs.push(..)` operation, so it only regains write permissions at that statement",
  "Because `first` refers to `strs`, then `strs` can only be mutated within a nested scope like the if-statement"
]
context = """
When `get_first` is called, Rust recognizes that the returned string `first` could point to data within `strs`, so `strs` loses 
write permissions. Once the `first` variable is no longer used (after the if-condition), then `strs` regains write permissions.
"""

[[questions]]
id = "652e596c-7cc9-42e6-a7f8-701879cd9a2b"
type = "MultipleChoice"
prompt.prompt = """
Consider this unsafe program:
```aquascope,interpreter,shouldFail
#fn main() {
let v1 = vec![1, 2, 3];
let mut v2 = v1;
v2.push(4);
println!("{}", v1[0]);`[]`    
#}
```

Which of the following best describes the point at which undefined behavior occurs in this program?
"""
answer.answer = "`v1[0]` reads `v1`, which points to deallocated memory"
prompt.distractors = [
  "`v2` owns the vector data on the heap, while `v1` does not",
  "`v1` has been moved into `v2` on line 2",
  "`v1` has its pointer invalidated by the `push` on line 3"
]
context = """
The undefined behavior arises because `v1` is read after being freed. Note that the other three options are correct statements
about the program, but they do not explain why the undefined behavior actually occurs. For example, if the `println` were deleted,
then the other three options are still true, but the program no longer has undefined behavior.
"""